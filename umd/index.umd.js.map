{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap fd8d4ccdf1b1e1ff0171","webpack:///./lib/gbs.js","webpack:///./lib/grammar/grammar.js","webpack:///./lib/grammar/reserved-words.js","webpack:///./lib/grammar/parser.js","webpack:///./lib/utils/errors.js","webpack:///./lib/utils/logger.js","webpack:///./lib/grammar/scope.js","webpack:///./lib/lexer/lexer.js","webpack:///./lib/nodes/nodes.js","webpack:///./lib/nodes/literals.js","webpack:///./lib/nodes/constant.js","webpack:///./lib/nodes/variable.js","webpack:///./lib/nodes/assignment.js","webpack:///./lib/nodes/conditional-statements.js","webpack:///./lib/nodes/binary-operations.js","webpack:///./lib/nodes/unary-operations.js","webpack:///./lib/nodes/primitive-functions.js","webpack:///./lib/nodes/primitive-procedures.js","webpack:///./lib/nodes/routine-calls.js","webpack:///./lib/nodes/routine-declarations.js","webpack:///./lib/nodes/repetition-statements.js","webpack:///./lib/nodes/program-root.js","webpack:///./lib/model/execution-context.js","webpack:///./lib/model/model.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACZA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAkB,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAkB,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAiC;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAqB,aAAa;AAClC,mBAAkB;AAClB;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA,cAAa;AACb;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA,0CAAyC;AACzC,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB;AACA,eAAc,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,kCAAiC;AACjC;AACA;AACA;AACA,qBAAoB;AACpB;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL,mBAAkB;AAClB;AACA,qBAAoB;AACpB;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA,wBAAuB,kBAAkB;AACzC;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;ACrXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACnDA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAU,EAAE;AACZ,iCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAmB;AACnB;AACA;;AAEA;AACA,aAAY;AACZ;;AAEA;AACA;AACA;AACA,WAAU,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;;;;;;;AC3RA;;AAEA;;AAEA;AACA,sBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACpBA;AACA;;AAEA;;;;;;;ACHA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAU,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAkC,OAAO;;AAEzC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;AACA,aAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAoB,wCAAwC;AAC5D,mBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACxOA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACZA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;ACnGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvFA;AACA;AACA;AACA;AACA,4BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4BAA2B,mCAAmC;AAC9D;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAuB,WAAW;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAuB,uBAAuB;AAC9C;AACA;AACA;;AAEA;AACA;AACA;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvBA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;ACrDA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC,QAAQ;AACxC,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"./index.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"gsWeblangCore\"] = factory();\n\telse\n\t\troot[\"gsWeblangCore\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fd8d4ccdf1b1e1ff0171","var gbs = {};\nvar grammar = require('./grammar/grammar');\ngbs.Parser = require('./grammar/parser');\ngbs.Lexer = require('./lexer/lexer');\ngbs.node = require('./nodes/nodes');\ngbs.errors = require('./utils/errors');\ngbs.Context = require('../lib/model/execution-context');\n\ngbs.getParser = function () {\n    return grammar(gbs);\n};\n\nmodule.exports = gbs;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/gbs.js\n// module id = 0\n// module chunks = 0","var TOKEN_NAMES = require('./reserved-words');\n\nmodule.exports = function (gbs) {\n    var g = new gbs.Parser(new gbs.Lexer());\n    var define = g;\n\n    function commaSeparatedArguments(parser) {\n        var parameters = [];\n        if (parser.token.id !== ')') {\n            for (; ;) {\n                parameters.push(parser.expression(0));\n                if (parser.token.id !== ',') {\n                    break;\n                }\n                parser.advance(',');\n            }\n        }\n        return parameters;\n    }\n\n    function parameterListCall(parser) {\n        parser.advance('(');\n        var parameters = commaSeparatedArguments(parser);\n        parser.advance(')');\n        return parameters;\n    }\n\n    function parameterDeclarationList() {\n        var parameters = [];\n        g.advance('(');\n        if (g.token.id !== ')') {\n            for (; ;) {\n                if (g.token.arity !== 'name') {\n                    g.error(g.token, 'Se esperaba un nombre de parámetro.');\n                }\n                parameters.push(g.token);\n                g.advance();\n                if (g.token.id !== ',') {\n                    break;\n                }\n                g.advance(',');\n            }\n        }\n        g.advance(')');\n        return parameters;\n    }\n\n    function parenthesisExpression() {\n        g.advance('(');\n        var p = g.expression(0);\n        g.advance(')');\n        return p;\n    }\n\n    function bodyStatement() {\n        return g.block() || [];\n    }\n\n    function bodyStatementWithOptionalMultiline() {\n        return (g.token.id === '{') ? bodyStatement() : [g.statement()];\n    }\n\n    function defineConstant(symbol, alias, value, type) {\n        var token = g.symbol(symbol);\n        token.nud = function () {\n            return new gbs.node.Constant(token, alias, value, type);\n        };\n    }\n\n    define.symbol('(end)');\n    define.symbol('(literal)').nud = function () {\n        return new gbs.node.NumericLiteral(this, this.value);\n    };\n\n    define.symbol('(name)').nud = function () {\n        return new gbs.node.Variable(this, this.value);\n    };\n\n    define.op('||', 20, gbs.node.OrOperation);\n    define.op('&&', 25, gbs.node.AndOperation);\n\n    define.op('+', 50, gbs.node.SumOperation);\n    define.op('-', 50, gbs.node.DiffOperation);\n    define.op('*', 60, gbs.node.MulOperation);\n    // TODO: chequear que efectivamente sean no asociativos\n    define.op(TOKEN_NAMES.DIV, 70, gbs.node.DivOperation);\n    define.op(TOKEN_NAMES.MOD, 70, gbs.node.ModOperation);\n\n    define.infixr('^', 80, function (left) {\n        return new gbs.node.ExpOperation(g.token, left, g.expression(80));\n    });\n    // TODO: chequear cómo se comporta el NOT\n    define.prefix(TOKEN_NAMES.NOT, function () {\n        return new gbs.node.NotOperation(g.token, g.expression(70));\n    });\n    define.prefix('-', function () {\n        return new gbs.node.SubstractionOperation(g.token, g.expression(70));\n    });\n\n    define.op('==', 40, gbs.node.EqOperation);\n    define.op('/=', 40, gbs.node.NotEqualOperation);\n    define.op('<', 40, gbs.node.LessOperation);\n    define.op('>', 40, gbs.node.GraterOperation);\n    define.op('<=', 40, gbs.node.LessEqualOperation);\n    define.op('>=', 40, gbs.node.GreaterEqualOperation);\n\n    defineConstant(TOKEN_NAMES.FALSE, 'False', false, TOKEN_NAMES.BOOLEAN);\n    defineConstant(TOKEN_NAMES.TRUE, 'True', true, TOKEN_NAMES.BOOLEAN);\n    defineConstant(TOKEN_NAMES.BLUE, 'Blue', 0, TOKEN_NAMES.COLOR);\n    defineConstant(TOKEN_NAMES.RED, 'Red', 1, TOKEN_NAMES.COLOR);\n    defineConstant(TOKEN_NAMES.BLACK, 'Black', 2, TOKEN_NAMES.COLOR);\n    defineConstant(TOKEN_NAMES.GREEN, 'Green', 3, TOKEN_NAMES.COLOR);\n    defineConstant(TOKEN_NAMES.NORTH, 'North', [0, 1], TOKEN_NAMES.DIRECTION);\n    defineConstant(TOKEN_NAMES.SOUTH, 'South', [0, -1], TOKEN_NAMES.DIRECTION);\n    defineConstant(TOKEN_NAMES.EAST, 'East', [1, 0], TOKEN_NAMES.DIRECTION);\n    defineConstant(TOKEN_NAMES.WEST, 'West', [-1, 0], TOKEN_NAMES.DIRECTION);\n\n    define.symbol(':');\n    define.symbol(')');\n    define.symbol('(');\n    define.symbol('[');\n    define.symbol(']');\n    define.symbol('}');\n    define.symbol(',');\n    define.symbol('->');\n    define.symbol('..');\n    define.symbol(TOKEN_NAMES.IN);\n    define.symbol(TOKEN_NAMES.ELSE);\n    define.symbol(TOKEN_NAMES.TO);\n\n    var separator = {separator: ';'};\n    define.stmt(';', function () {\n        return separator;\n    });\n\n    define.infix('(', 80, function (left) {\n        if (left.token.arity !== 'name') {\n            gbs.errors.throwParserError(left, left.token.value + ' no es una función o procedimiento');\n        }\n        var parameters = commaSeparatedArguments(g);\n        g.advance(')');\n        var node;\n        if (left.token.value[0].toUpperCase() === left.token.value[0]) {\n            node = new gbs.node.ProcedureCall(left.token, function () {\n                return g.scope.find(left.token.value);\n            }, parameters);\n        } else {\n            node = new gbs.node.FunctionCall(left.token, function () {\n                return g.scope.find(left.token.value);\n            }, parameters);\n        }\n        return node;\n    });\n\n    define.infixr(':=', 10, function (left) {\n        if (left.id !== '.' && left.id !== '[' && (!left.token || left.token.arity !== 'name')) {\n            g.error(left, 'Del lado izquierdo de la asignación sólo pueden usarse identificadores');\n        }\n        return new gbs.node.Assignment({}, left, g.expression(9));\n    });\n\n    define.stmt(TOKEN_NAMES.DROP, function () {\n        return new gbs.node.PutStone(g.token, parameterListCall(g));\n    });\n\n    define.stmt(TOKEN_NAMES.GRAB, function () {\n        return new gbs.node.RemoveStone(g.token, parameterListCall(g));\n    });\n\n    define.stmt(TOKEN_NAMES.MOVE, function () {\n        return new gbs.node.MoveClaw(g.token, parameterListCall(g));\n    });\n\n    define.stmt(TOKEN_NAMES.MOVE_TO_EDGE, function () {\n        return new gbs.node.MoveToEdge(g.token, parameterListCall(g));\n    });\n\n    define.stmt(TOKEN_NAMES.CLEAN_BOARD, function () {\n        return new gbs.node.CleanBoard(g.token, parameterListCall(g));\n    });\n\n    define.stmt(TOKEN_NAMES.BOOM, function () {\n        var token = g.token;\n        if (parenthesisExpression(g)) {\n            gbs.errors.throwParserError(token, 'BOOM no lleva parámetros');\n        }\n        return new gbs.node.Boom(token);\n    });\n\n    define.prefix(TOKEN_NAMES.HAS_STONES, function () {\n        return new gbs.node.HasStones(g.token, parameterListCall(g));\n    });\n\n    define.prefix(TOKEN_NAMES.NUM_STONES, function () {\n        return new gbs.node.NumStones(g.token, parameterListCall(g));\n    });\n\n    define.prefix(TOKEN_NAMES.MAX_COLOR, function () {\n        return new gbs.node.MaxColor(g.token, parameterListCall(g));\n    });\n\n    define.prefix(TOKEN_NAMES.MIN_COLOR, function () {\n        return new gbs.node.MinColor(g.token, parameterListCall(g));\n    });\n\n    define.prefix(TOKEN_NAMES.MAX_DIR, function () {\n        return new gbs.node.MaxDir(g.token, parameterListCall(g));\n    });\n\n    define.prefix(TOKEN_NAMES.MIN_DIR, function () {\n        return new gbs.node.MinDir(g.token, parameterListCall(g));\n    });\n\n    define.prefix(TOKEN_NAMES.MAX_BOOL, function () {\n        return new gbs.node.MaxBool(g.token, parameterListCall(g));\n    });\n\n    define.prefix(TOKEN_NAMES.MIN_BOOL, function () {\n        return new gbs.node.MinBool(g.token, parameterListCall(g));\n    });\n\n    define.prefix(TOKEN_NAMES.CAN_MOVE, function () {\n        var id = g.token;\n        var parameters = parameterListCall(g);\n        return new gbs.node.CanMove(id, parameters);\n    });\n\n    define.stmt(TOKEN_NAMES.IF, function () {\n        var token = g.token;\n        g.advance('(');\n        var condition = g.expression(0);\n        g.advance(')');\n        var trueBranch = bodyStatement(g);\n        var falseBranch = null;\n        if (g.token.id === TOKEN_NAMES.ELSE) {\n            g.scope.reserve(g.token);\n            g.advance(TOKEN_NAMES.ELSE);\n            falseBranch = bodyStatement(g);\n        }\n        return new gbs.node.If(token, condition, trueBranch, falseBranch);\n    });\n\n    define.stmt(TOKEN_NAMES.SWITCH, function () {\n        var token = g.token;\n        var condition = parenthesisExpression(g);\n        if (g.token.id === TOKEN_NAMES.TO) {\n            g.advance(TOKEN_NAMES.TO);\n        }\n        g.advance('{');\n        var cases = [];\n        for (; ;) {\n            var exp = g.expression(0);\n            g.advance('->');\n            var body = bodyStatementWithOptionalMultiline(g);\n            cases.push({\n                case: exp,\n                body: body\n            });\n            if (g.token.id === '}' || !g.tokens.hasNext()) {\n                break;\n            }\n        }\n        g.advance('}');\n        return new gbs.node.Switch(token, condition, cases);\n    });\n\n    define.stmt(TOKEN_NAMES.WHILE, function () {\n        return new gbs.node.While(g.token, parenthesisExpression(g), bodyStatement(g));\n    });\n\n    define.stmt(TOKEN_NAMES.REPEAT, function () {\n        return new gbs.node.Repeat(g.token, parenthesisExpression(g), bodyStatement(g));\n    });\n\n    define.stmt(TOKEN_NAMES.FOR_EACH, function () {\n        // foreach dir in [minDir() .. maxDir()]\n        var iterator = g.expression();\n        if (iterator.token.arity !== 'name') {\n            g.error(iterator.token, 'El foreach espera un identificador sobre el cual iterar');\n        }\n        g.advance(TOKEN_NAMES.IN);\n        g.advance('[');\n        var items = commaSeparatedArguments(g);\n        g.advance(']');\n        return new gbs.node.ForEach(g.token, iterator, items, g.block());\n    });\n\n    define.stmt('{', function () {\n        var a = g.statements();\n        g.advance('}');\n        return a;\n    });\n\n    define.stmt('(', function () {\n        var a = g.statements();\n        g.advance(')');\n        return a;\n    });\n\n    define.prefix('(', function () {\n        var expression = g.expression(0);\n        g.advance(')');\n        return expression;\n    });\n\n    define.root(TOKEN_NAMES.PROGRAM, function () {\n        return new gbs.node.Program(g.token, g.block());\n    });\n\n    define.root(TOKEN_NAMES.FUNCTION, function () {\n        g.newScope();\n        var token = g.token;\n        if (g.token.arity === 'name') {\n            if (g.token.value[0] !== g.token.value[0].toLowerCase()) {\n                g.error(token, 'El nombre de la función ' + token.value + ' debe emepzar con minúscula');\n            }\n            g.scope.define(token);\n            g.advance();\n        } else {\n            g.error(token, 'Se esperaba un nombre de función');\n        }\n        var parameters = parameterDeclarationList(g);\n        var body = bodyStatement(g);\n\n        var ret = body.pop();\n        if (!ret || ret.alias !== 'return' || !ret.expression) {\n            g.error(token, 'La función ' + token.value + ' debe terminar con un ' + TOKEN_NAMES.RETURN);\n        }\n        g.scope.pop();\n        var declaration = new gbs.node.FunctionDeclaration(token, parameters, body, ret);\n        token.declaration = declaration;\n        return declaration;\n    });\n\n    define.stmt(TOKEN_NAMES.RETURN, function () {\n        return new gbs.node.ReturnStatement(g.token, parenthesisExpression(g));\n    });\n\n    define.root(TOKEN_NAMES.PROCEDURE, function () {\n        g.newScope();\n        var token = g.token;\n        if (g.token.arity === 'name') {\n            if (g.token.value[0] !== g.token.value[0].toUpperCase()) {\n                g.error(token, 'El nombre del procedimiento ' + token.value + ' debe emepzar con mayúscula');\n            }\n            g.scope.define(token);\n            g.advance();\n        } else {\n            g.error(token, 'Se esperaba un nombre de procedimiento');\n        }\n        var parameters = parameterDeclarationList(g);\n        var body = bodyStatement();\n        g.scope.pop();\n        var declaration = new gbs.node.ProcedureDeclaration(token, parameters, body);\n        token.declaration = declaration;\n        return declaration;\n    });\n\n    define.parse = function (input) {\n        var main;\n        var declarations = [];\n        var roots = g.parseProgram(input);\n        for (var i = 0; i < roots.length; i++) {\n            if (roots[i].alias === 'program') {\n                main = roots[i];\n            } else {\n                declarations.push(roots[i]);\n            }\n        }\n        return new gbs.node.Root(main, declarations);\n    };\n\n    return g;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/grammar/grammar.js\n// module id = 1\n// module chunks = 0","var TOKEN_NAMES = {\n    PROGRAM: 'program',\n    PROCEDURE: 'procedure',\n    FUNCTION: 'function',\n    RETURN: 'return',\n    DROP: 'Poner',\n    MOVE: 'Mover',\n    GRAB: 'Sacar',\n    BOOM: 'BOOM',\n    MOVE_TO_EDGE: 'IrAlBorde',\n    CLEAN_BOARD: 'VaciarTablero',\n    REPEAT: 'repeat',\n    WHILE: 'while',\n    FOR_EACH: 'foreach',\n    IN: 'in',\n    IF: 'if',\n    THEN: 'then',\n    ELSE: 'else',\n    SWITCH: 'switch',\n    TO: 'to',\n    OPPOSITE: 'opuesto',\n    NEXT: 'siguiente',\n    PREVIOUS: 'previo',\n    DIV: 'div',\n    MOD: 'mod',\n    NOT: 'not',\n    HAS_STONES: 'hayBolitas',\n    CAN_MOVE: 'puedeMover',\n    NUM_STONES: 'nroBolitas',\n    MIN_DIR: 'minDir',\n    MAX_DIR: 'maxDir',\n    MIN_COLOR: 'minColor',\n    MAX_COLOR: 'maxColor',\n    MIN_BOOL: 'minBool',\n    MAX_BOOL: 'maxBool',\n    RED: 'Rojo',\n    BLUE: 'Azul',\n    BLACK: 'Negro',\n    GREEN: 'Verde',\n    TRUE: 'True',\n    FALSE: 'False',\n    NORTH: 'Norte',\n    SOUTH: 'Sur',\n    EAST: 'Este',\n    WEST: 'Oeste',\n    BOOLEAN: 'Booleano',\n    COLOR: 'Color',\n    DIRECTION: 'Dirección',\n    NUMBER: 'Número'\n};\n\nmodule.exports = TOKEN_NAMES;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/grammar/reserved-words.js\n// module id = 2\n// module chunks = 0","var errors = require('../utils/errors');\nvar Scope = require('./scope');\n\nfunction throwUndefinedSymbolError() {\n    errors.throwParserError(this, 'No definido');\n}\n\nfunction throwMissingOperatorError() {\n    errors.throwParserError(this, 'No se encontró el operador');\n}\n\nvar OriginalSymbol = function () {\n    this.nud = throwUndefinedSymbolError;\n    this.led = throwMissingOperatorError;\n};\n\nvar Parser = function (lexer) {\n    this.scope = null;\n    this.token = null;\n    this.tokens = lexer;\n    this.symbolTable = {};\n};\n\nParser.prototype.symbol = function (id, bindingPower) {\n    var s = this.symbolTable[id];\n    bindingPower = bindingPower || 0;\n    if (s) {\n        if (bindingPower > s.lbp) {\n            s.lbp = bindingPower;\n        }\n    } else {\n        s = new OriginalSymbol();\n        s.id = s.value = id;\n        s.lbp = bindingPower;\n        this.symbolTable[id] = s;\n    }\n    return s;\n};\n\nParser.prototype.expression = function (rightBindingPower) {\n    rightBindingPower = rightBindingPower || 0;\n    var left;\n    var t = this.token;\n    this.advance();\n    left = t.nud();\n    while (rightBindingPower < this.token.lbp) {\n        t = this.token;\n        this.advance();\n        left = t.led(left);\n    }\n    return left;\n};\n\nParser.prototype.error = function (token, message) {\n    errors.throwParserError(token, message);\n};\n\nParser.prototype.newScope = function () {\n    var s = this.scope;\n    this.scope = new Scope(this);\n    this.scope.parent = s;\n    return this.scope;\n};\n\nParser.prototype.advance = function (id) {\n    var a;\n    var o;\n    var t;\n    var v;\n    var tokens = this.tokens;\n    if (id && this.token.id !== id) {\n        if (this.lastToken && this.lastToken.range && this.token.range) {\n            this.token.range.start = this.lastToken.range.start;\n        }\n        errors.throwParserError(this.token, 'Se esperaba \"' + id + '\" pero se encontró \"' + this.token.value + '\"');\n    }\n    if (!tokens.hasNext()) {\n        var lastRange = this.token.range;\n        this.token = this.symbolTable['(end)'];\n        this.token.range = lastRange;\n        return this.token;\n    }\n    t = tokens.next();\n    v = t.value;\n    a = t.type;\n    if (a === 'name') {\n        o = this.scope.find(v);\n        if (o.arity === 'routine') {\n            // force late binding\n            o = this.symbolTable['(name)'];\n        }\n    } else if (a === 'operator') {\n        o = this.symbolTable[v];\n        if (!o) {\n            errors.throwParserError(t, 'Unknown operator.');\n        }\n    } else if (a === 'number') {\n        o = this.symbolTable['(literal)'];\n        a = 'literal';\n        v = parseInt(v, 10);\n    } else {\n        errors.throwParserError(t, 'Unexpected token.');\n    }\n\n    var token = Object.create(o);\n    token.range = t.range;\n    token.value = v;\n    token.arity = a;\n    this.lastToken = this.token;\n    this.token = token;\n    return token;\n};\n\nParser.prototype.op = function (id, bp, OpDefinition) {\n    var parser = this;\n    var s = this.symbol(id, bp);\n    s.led = function (left) {\n        return new OpDefinition(this, left, parser.expression(bp));\n    };\n    return s;\n};\n\nParser.prototype.statement = function () {\n    var n = this.token;\n    var v;\n    if (n.std) {\n        this.advance();\n        this.scope.reserve(n);\n        return n.std();\n    }\n    v = this.expression(0);\n    if (v.alias !== ':=' && v.id !== '(' && v.arity !== 'routine') {\n        errors.throwParserError(v, 'Bad expression statement.');\n    }\n    return v;\n};\n\nParser.prototype.statements = function () {\n    var statementsList = [];\n    var symbol;\n    for (; ;) {\n        if (this.token.id === '}' || this.token.id === '(end)') {\n            break;\n        }\n        var range = this._currentRange();\n        symbol = this.statement();\n        if (symbol && !symbol.separator) {\n            this._applyRangeToSymbol(range, symbol);\n            statementsList.push(symbol);\n        }\n    }\n    if (statementsList.length === 0) {\n        return null;\n    }\n    return statementsList;\n};\n\nParser.prototype._applyRangeToSymbol = function (range, symbol) {\n    symbol.range = range;\n    if (this.token.range && this.token.range.end) {\n        range.end = this.token.range.end;\n    }\n};\n\nParser.prototype.rootDeclaration = function () {\n    var n = this.token;\n    if (!n.root) {\n        errors.throwParserError(n, 'Se esperaba una definición de programa, función o procedimiento.');\n    }\n    this.advance();\n    this.scope.reserve(n);\n    return n.root();\n};\n\nParser.prototype.stmt = function (symbol, f) {\n    var x = this.symbol(symbol);\n    x.std = f;\n    return x;\n};\n\nParser.prototype.infix = function (id, bp, led) {\n    var s = this.symbol(id, bp);\n    var self = this;\n    s.led = led || function (left) {\n        this.left = left;\n        this.right = self.expression(bp);\n        this.arity = 'binary';\n        return this;\n    };\n    return s;\n};\n\nParser.prototype.infixr = function (id, bp, led) {\n    var s = this.symbol(id, bp);\n    var self = this;\n    s.led = led || function (left) {\n        this.left = left;\n        this.right = self.expression(bp - 1);\n        this.arity = 'binary';\n        return this;\n    };\n    return s;\n};\n\nParser.prototype.prefix = function (id, nud) {\n    var s = this.symbol(id);\n    var self = this;\n    s.nud = nud || function () {\n        self.scope.reserve(this);\n        this.left = self.expression(70);\n        this.arity = 'unary';\n        return this;\n    };\n    return s;\n};\n\nParser.prototype.root = function (symbol, f) {\n    var x = this.symbol(symbol);\n    x.root = f;\n    return x;\n};\n\nParser.prototype.block = function () {\n    var t = this.token;\n    this.advance('{');\n    return t.std();\n};\n\nParser.prototype._currentRange = function () {\n    return {start: this.token.range.start, end: this.token.range.end};\n};\n\nParser.prototype.roots = function () {\n    var roots = [];\n    var symbol;\n    for (; ;) {\n        if (this.token.id === '(end)') {\n            break;\n        }\n        var range = this._currentRange();\n        symbol = this.rootDeclaration();\n        if (symbol) {\n            this._applyRangeToSymbol(range, symbol);\n            roots.push(symbol);\n        }\n    }\n    if (roots.length === 0) {\n        return null;\n    }\n    return roots;\n};\n\nParser.prototype._parseContextAwareNode = function (input, nodeParser) {\n    this.tokens.input(input);\n    this.newScope();\n    this.advance();\n    var s = nodeParser();\n    this.advance('(end)');\n    this.scope.pop();\n    return s;\n};\n\nParser.prototype.parseExpression = function (input) {\n    var self = this;\n    return this._parseContextAwareNode(input, function () {\n        return self.expression(0);\n    });\n};\n\nParser.prototype.parseProgram = function (input) {\n    var self = this;\n    return this._parseContextAwareNode(input, function () {\n        return self.roots();\n    });\n};\n\nParser.prototype.parseStatements = function (input) {\n    var self = this;\n    return this._parseContextAwareNode(input, function () {\n        return self.statements();\n    });\n};\n\nmodule.exports = Parser;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/grammar/parser.js\n// module id = 3\n// module chunks = 0","var log = require('./logger');\n\nvar errors = {};\n\nerrors.throwParserError = function (token, description) {\n    var someError = {error: description, on: token};\n    log('PARSER ERROR: ', someError);\n    throw someError;\n};\n\nerrors.throwInterpreterError = function (token, message) {\n    throw new errors.InterpreterException(message, token);\n};\n\nerrors.InterpreterException = function (message, on) {\n    this.message = message;\n    this.on = on;\n};\nerrors.InterpreterException.prototype = new Error();\n\nmodule.exports = errors;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils/errors.js\n// module id = 4\n// module chunks = 0","var doNothing = function () {\n};\n\nmodule.exports = (console && console.log) ? console.log : doNothing;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/utils/logger.js\n// module id = 5\n// module chunks = 0","var errors = require('../utils/errors');\n\nfunction itself() {\n    return this;\n}\n\nvar Scope = function (parser) {\n    this.parser = parser;\n    this.def = {};\n};\n\nScope.prototype.define = function (identifier) {\n    var t = this.def[identifier.value];\n    if (typeof t === 'object') {\n        errors.throwParserError(identifier, t.reserved ? 'Already reserved.' : 'Already defined.');\n    }\n    this.def[identifier.value] = identifier;\n    identifier.reserved = false;\n    identifier.nud = itself;\n    identifier.led = null;\n    identifier.std = null;\n    identifier.lbp = 0;\n    identifier.scope = this.parser.scope;\n    return identifier;\n};\n\nScope.prototype.find = function (name) {\n    var e = this;\n    var targetToken;\n    for (; ;) {\n        targetToken = e.def[name];\n        if (targetToken && typeof targetToken !== 'function') {\n            return e.def[name];\n        }\n        e = e.parent;\n        if (!e) {\n            targetToken = this.parser.symbolTable[name];\n            return targetToken && typeof targetToken !== 'function' ? targetToken : this.parser.symbolTable['(name)'];\n        }\n    }\n};\n\nScope.prototype.pop = function () {\n    this.scope = this.parent;\n};\n\nScope.prototype.reserve = function (name) {\n    if (name.arity !== 'name' || name.reserved) {\n        return;\n    }\n    var t = this.def[name.value];\n    if (t) {\n        if (t.reserved) {\n            return;\n        }\n        if (t.arity === 'name') {\n            name.error('Already defined.');\n        }\n    }\n    this.def[name.value] = name;\n    name.reserved = true;\n};\n\nmodule.exports = Scope;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/grammar/scope.js\n// module id = 6\n// module chunks = 0","function Lexer(prefix, suffix) {\n    // Current reading position\n    this.from = 0;\n    this.startColumn = 0;\n    this.endColumn = 0;\n    this.row = 0;\n    this.prefix = prefix || '/=-<>:|&.';\n    this.suffix = suffix || '=|&>.';\n\n    this.punctuators = '/+-*^.:|&;,()<>{}[]=';\n\n    // Look ahead position\n    this.i = 0;\n\n    this.buf = null;\n    this.buflen = 0;\n}\n\nLexer.prototype.hasNext = function () {\n    this._skipNonTokens();\n    return this.from < this.buflen;\n};\n\nLexer.prototype.input = function (buf) {\n    this.from = 0;\n    this.i = 0;\n    this.startColumn = 0;\n    this.endColumn = 0;\n    this.row = 0;\n    this.buf = buf;\n    this.buflen = buf.length;\n    this.current = null;\n    this.nextChar = null;\n};\n\nvar TokenTypes = {\n    IDENTIFIER: 'name',\n    OPERATOR: 'operator',\n    EOF: 'eof',\n    COMMENT: 'comment',\n    NUMBER: 'number',\n    NEWLINE: 'newline'\n};\n\n/**\n * This method is highly procedural for performance reasons.\n * There is no need for the lexer to be too flexible, since the\n * semantics will be associated to identifiers on the parser.\n *\n * @returns Token. The next token on the buffer, or null if the buffer is empty.\n */\nLexer.prototype.next = function () {\n    do {\n        this._skipNonTokens();\n        this._refreshCurrentAndNextChars();\n\n        if (this.from >= this.buflen) {\n            return null;\n        }\n    } while (this._processComment());\n\n    // Always add cases in descending order of occurrence probability\n    if (this._processIdentifier()) {\n        return this._consume(TokenTypes.IDENTIFIER);\n    } else if (this._processOperator()) {\n        return this._consume(TokenTypes.OPERATOR);\n    } else if (this._processNumber()) {\n        return this._consume(TokenTypes.NUMBER);\n    }\n    return this._processError();\n};\n\n// PRIVATE\n\nfunction error(token, description) {\n    return {error: description, on: token};\n}\n\nLexer.prototype._make = function (type, value) {\n    return {\n        type: type,\n        value: value,\n        range: {\n            start: {row: this.row, column: this.startColumn},\n            end: {row: this.row, column: this.endColumn}\n        }\n    };\n};\n\nLexer.prototype._consume = function (type) {\n    var text = this.buf.substring(this.from, this.i);\n    var newToken = this._make(type, text);\n    this.from = this.i;\n    this.startColumn = this.endColumn;\n    return newToken;\n};\n\nLexer.prototype._refreshCurrentAndNextChars = function () {\n    this.current = this.buf.charAt(this.from);\n    this.nextChar = this.buf.charAt(this.from + 1);\n};\n\nLexer.prototype._processOperator = function () {\n    if (this.punctuators.indexOf(this.current) >= 0) {\n        this._increaseFrom();\n        this._processMultiCharOperator();\n        return true;\n    }\n    return false;\n};\n\nLexer.prototype._processMultiCharOperator = function () {\n    if (this.prefix.indexOf(this.current) >= 0 && this.suffix.indexOf(this.nextChar) >= 0) {\n        this._incrementStep();\n    }\n};\n\nLexer.prototype._processNumber = function () {\n    if (_isDigit(this.current)) {\n        this._increaseFrom();\n        while (this.i < this.buflen && _isDigit(this.buf.charAt(this.i))) {\n            this._incrementStep();\n        }\n        return true;\n    }\n    return false;\n};\n\nLexer.prototype._processError = function () {\n    this._increaseFrom();\n    return error('Unmatched token', this._consume('UNMATCHED'));\n};\n\nLexer.prototype._resetColumnCount = function () {\n    this.startColumn = this.endColumn;\n};\n\nLexer.prototype._increaseFrom = function () {\n    this.i = this.from + 1;\n    this.startColumn = this.startColumn + 1;\n    this.endColumn = this.startColumn;\n};\n\nLexer.prototype._incrementStep = function () {\n    this.i++;\n    this.endColumn++;\n};\n\nLexer.prototype._processIdentifier = function () {\n    if (_isAlpha(this.current)) {\n        this._increaseFrom();\n        while (this.i < this.buflen && _isAlphanum(this.buf.charAt(this.i))) {\n            this._incrementStep();\n        }\n        return true;\n    }\n    return false;\n};\n\nLexer.prototype._skipNonTokens = function () {\n    while (this.from < this.buflen) {\n        var c = this.buf.charAt(this.from);\n        if (c === ' ' || c === '\\t' || c === '\\r' || c === '\\n') {\n            if (_isNewline(c)) {\n                this.row += 1;\n                this.endColumn = 0;\n                this.startColumn = 0;\n            } else {\n                this.startColumn++;\n                this.endColumn = this.startColumn;\n            }\n            this.from++;\n            this.i = this.from;\n        } else {\n            break;\n        }\n    }\n};\n\nLexer.prototype._processComment = function () {\n    var chars = this.current + this.nextChar;\n    return this._processSingleLineComment(chars) || this._processMultiLineComment(chars);\n};\n\nLexer.prototype._processSingleLineComment = function (chars) {\n    if (chars === '//') {\n        while (this.i < this.buflen && !_isNewline(this.buf.charAt(this.i))) {\n            this._incrementStep();\n        }\n        this.from = this.i;\n        this.row++;\n        this.startColumn = 0;\n        this.endColumn = 0;\n        return true;\n    }\n};\n\nLexer.prototype._processMultiLineComment = function (chars) {\n    if (chars === '/*') {\n        this._incrementStep();\n        this._incrementStep();\n        while (this.i < this.buflen && this.buf.charAt(this.i) !== '*' && this.buf.charAt(this.i + 1) !== '/') {\n            this._incrementStep();\n            if (_isNewline(this.buf.charAt(this.i))) {\n                this.endColumn = 0;\n            }\n        }\n        this._incrementStep();\n        this._incrementStep();\n        this.from = this.i;\n        this.endColumn = this.startColumn;\n        return true;\n    }\n    return false;\n};\n\nfunction _isNewline(c) {\n    return c === '\\r' || c === '\\n';\n}\n\nfunction _isDigit(c) {\n    return c >= '0' && c <= '9';\n}\n\nfunction _isAlpha(c) {\n    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c === '_' || c === '\\'';\n}\n\nfunction _isAlphanum(c) {\n    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c === '_' || c === '$';\n}\n\nmodule.exports = Lexer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/lexer/lexer.js\n// module id = 7\n// module chunks = 0","var node = {};\nnode.errors = require('../utils/errors');\n\nvar constants = {\n    STM: 'statement',\n    BINARY: 'binary',\n    EXPRESSION: 'binary',\n    NUMERIC_LITERAL: 'NumericLiteral'\n};\n\nnode.interpretBlock = function (block, context) {\n    block = block || [];\n    for (var i = 0; i < block.length; i++) {\n        block[i].interpret(context);\n    }\n    return context;\n};\n\nrequire('./literals')(node, constants);\nrequire('./constant')(node, constants);\nrequire('./variable')(node, constants);\nrequire('./assignment')(node, constants);\nrequire('./conditional-statements')(node, constants);\nrequire('./binary-operations')(node, constants);\nrequire('./unary-operations')(node, constants);\nrequire('./primitive-functions')(node, constants);\nrequire('./primitive-procedures')(node, constants);\nrequire('./routine-calls')(node, constants);\nrequire('./routine-declarations')(node, constants);\nrequire('./repetition-statements')(node, constants);\nrequire('./program-root')(node, constants);\n\nmodule.exports = node;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/nodes/nodes.js\n// module id = 8\n// module chunks = 0","module.exports = function (node, constants) {\n    node.NumericLiteral = function (token, value) {\n        this.token = token;\n        this.value = value;\n        this.alias = constants.NUMERIC_LITERAL;\n    };\n    node.NumericLiteral.prototype.type = 'number';\n\n    node.NumericLiteral.prototype.eval = function () {\n        return this.value;\n    };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/nodes/literals.js\n// module id = 9\n// module chunks = 0","module.exports = function (node) {\n    node.Constant = function (token, alias, value, type) {\n        this.token = token;\n        this.value = value;\n        this.alias = alias;\n        this.type = type;\n    };\n\n    node.Constant.prototype.eval = function () {\n        return this.value;\n    };\n}\n;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/nodes/constant.js\n// module id = 10\n// module chunks = 0","module.exports = function (node) {\n    node.Variable = function (token, id) {\n        this.token = token;\n        this.value = id;\n    };\n\n    node.Variable.prototype.eval = function (context) {\n        return context.get(this.value);\n    };\n\n    return node;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/nodes/variable.js\n// module id = 11\n// module chunks = 0","module.exports = function (node, constants) {\n    node.Assignment = function (token, left, right) {\n        this.token = token;\n        this.arity = constants.STM;\n        this.alias = ':=';\n        this.left = left;\n        this.right = right;\n    };\n\n    node.Assignment.prototype.interpret = function (context) {\n        context.put(this.left.token.value, this.right.eval(context));\n    };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/nodes/assignment.js\n// module id = 12\n// module chunks = 0","module.exports = function (node) {\n    node.If = function (token, condition, trueBranch, falseBranch) {\n        this.token = token;\n        this.alias = 'if';\n        this.condition = condition;\n        this.trueBranch = trueBranch;\n        this.falseBranch = falseBranch;\n    };\n\n    node.If.prototype.interpret = function (context) {\n        return node.interpretBlock(this.condition.eval(context) ? this.trueBranch : this.falseBranch, context);\n    };\n\n    node.Switch = function (token, expression, cases) {\n        this.token = token;\n        this.alias = 'switch';\n        this.expression = expression;\n        this.cases = cases;\n    };\n\n    node.Switch.prototype.interpret = function (context) {\n        var value = this.expression.eval(context);\n        for (var i = 0; i < this.cases.length; i++) {\n            if (this.cases[i].case.eval(context) === value) {\n                node.interpretBlock(this.cases[i].body, context);\n                break;\n            }\n        }\n        return context;\n    };\n}\n;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/nodes/conditional-statements.js\n// module id = 13\n// module chunks = 0","module.exports = function (node, constants) {\n    var BinaryOperation = function (token, left, right, alias) {\n        this.alias = alias;\n        this.token = token;\n        this.left = left;\n        this.right = right;\n        this.arity = constants.BINARY;\n    };\n\n    function defineBinaryOperation(className) {\n        node[className] = function (token, left, right) {\n            BinaryOperation.call(this, token, left, right, className);\n        };\n        node[className].prototype = new BinaryOperation();\n    }\n\n    defineBinaryOperation('SumOperation');\n    node.SumOperation.prototype.eval = function (context) {\n        return this.left.eval(context) + this.right.eval(context);\n    };\n\n    defineBinaryOperation('DiffOperation');\n    node.DiffOperation.prototype.eval = function (context) {\n        return this.left.eval(context) - this.right.eval(context);\n    };\n\n    defineBinaryOperation('MulOperation');\n    node.MulOperation.prototype.eval = function (context) {\n        return this.left.eval(context) * this.right.eval(context);\n    };\n\n    defineBinaryOperation('DivOperation');\n    node.DivOperation.prototype.eval = function (context) {\n        return Math.floor(this.left.eval(context) / this.right.eval(context));\n    };\n\n    defineBinaryOperation('ModOperation');\n    node.ModOperation.prototype.eval = function (context) {\n        return this.left.eval(context) % this.right.eval(context);\n    };\n\n    defineBinaryOperation('ExpOperation');\n    node.ExpOperation.prototype.eval = function (context) {\n        return Math.pow(this.left.eval(context), this.right.eval(context));\n    };\n\n    defineBinaryOperation('AndOperation');\n    node.AndOperation.prototype.eval = function (context) {\n        return this.left.eval(context) && this.right.eval(context);\n    };\n\n    defineBinaryOperation('OrOperation');\n    node.OrOperation.prototype.eval = function (context) {\n        return this.left.eval(context) || this.right.eval(context);\n    };\n\n    defineBinaryOperation('NotEqualOperation');\n    node.NotEqualOperation.prototype.eval = function (context) {\n        return this.left.eval(context) !== this.right.eval(context);\n    };\n\n    defineBinaryOperation('EqOperation');\n    node.EqOperation.prototype.eval = function (context) {\n        return this.left.eval(context) === this.right.eval(context);\n    };\n\n    defineBinaryOperation('LessOperation');\n    node.LessOperation.prototype.eval = function (context) {\n        return this.left.eval(context) < this.right.eval(context);\n    };\n\n    defineBinaryOperation('GraterOperation');\n    node.GraterOperation.prototype.eval = function (context) {\n        return this.left.eval(context) > this.right.eval(context);\n    };\n\n    defineBinaryOperation('LessEqualOperation');\n    node.LessEqualOperation.prototype.eval = function (context) {\n        return this.left.eval(context) <= this.right.eval(context);\n    };\n\n    defineBinaryOperation('GreaterEqualOperation');\n    node.GreaterEqualOperation.prototype.eval = function (context) {\n        return this.left.eval(context) >= this.right.eval(context);\n    };\n}\n;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/nodes/binary-operations.js\n// module id = 14\n// module chunks = 0","module.exports = function (node) {\n    node.NotOperation = function (token, expression) {\n        this.token = token;\n        this.expression = expression;\n        this.alias = 'not';\n    };\n\n    node.NotOperation.prototype.eval = function (context) {\n        return !this.expression.eval(context);\n    };\n\n    node.SubstractionOperation = function (token, expression) {\n        this.token = token;\n        this.expression = expression;\n        this.alias = '-';\n    };\n\n    node.SubstractionOperation.prototype.eval = function (context) {\n        return -this.expression.eval(context);\n    };\n}\n;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/nodes/unary-operations.js\n// module id = 15\n// module chunks = 0","module.exports = function (node, constants) {\n    node.HasStones = function (token, parameters) {\n        this.token = token;\n        this.arity = constants.EXPRESSION;\n        this.alias = 'hasStones';\n        this.parameters = parameters;\n    };\n\n    node.HasStones.prototype.eval = function (context) {\n        return context.board().amountStones(this.parameters[0].eval(context)) > 0;\n    };\n\n    node.CanMove = function (token, parameters) {\n        this.token = token;\n        this.arity = constants.EXPRESSION;\n        this.alias = 'canMove';\n        this.parameters = parameters;\n    };\n\n    node.CanMove.prototype.eval = function (context) {\n        return context.board().canMove(this.parameters[0].eval(context));\n    };\n\n    node.NumStones = function (token, parameters) {\n        this.token = token;\n        this.arity = constants.EXPRESSION;\n        this.alias = 'numStones';\n        this.parameters = parameters;\n    };\n\n    node.NumStones.prototype.eval = function (context) {\n        return context.board().amountStones(this.parameters[0].eval(context));\n    };\n\n    node.MinDir = function (token, parameters) {\n        this.token = token;\n        this.arity = constants.EXPRESSION;\n        this.alias = 'minDir';\n        this.parameters = parameters;\n    };\n\n    node.MinDir.prototype.eval = function (context) {\n        return context.nativeRepresentations().minDir;\n    };\n\n    node.MaxDir = function (token, parameters) {\n        this.token = token;\n        this.arity = constants.EXPRESSION;\n        this.alias = 'maxDir';\n        this.parameters = parameters;\n    };\n\n    node.MaxDir.prototype.eval = function (context) {\n        return context.nativeRepresentations().maxDir;\n    };\n\n    node.MaxColor = function (token, parameters) {\n        this.token = token;\n        this.arity = constants.EXPRESSION;\n        this.alias = 'maxColor';\n        this.parameters = parameters;\n    };\n\n    node.MaxColor.prototype.eval = function (context) {\n        return context.nativeRepresentations().maxColor;\n    };\n\n    node.MinColor = function (token, parameters) {\n        this.token = token;\n        this.arity = constants.EXPRESSION;\n        this.alias = 'minColor';\n        this.parameters = parameters;\n    };\n\n    node.MinColor.prototype.eval = function (context) {\n        return context.nativeRepresentations().minColor;\n    };\n\n    node.MinBool = function (token, parameters) {\n        this.token = token;\n        this.arity = constants.EXPRESSION;\n        this.alias = 'minBool';\n        this.parameters = parameters;\n    };\n\n    node.MinBool.prototype.eval = function () {\n        return false;\n    };\n\n    node.MaxBool = function (token, parameters) {\n        this.token = token;\n        this.arity = constants.EXPRESSION;\n        this.alias = 'maxBool';\n        this.parameters = parameters;\n    };\n\n    node.MaxBool.prototype.eval = function () {\n        return true;\n    };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/nodes/primitive-functions.js\n// module id = 16\n// module chunks = 0","module.exports = function (node, constants) {\n    node.MoveClaw = function (token, parameters) {\n        this.token = token;\n        this.arity = constants.STM;\n        this.alias = 'MoveClaw';\n        this.parameters = parameters;\n    };\n\n    node.MoveClaw.prototype.interpret = function (context) {\n        try {\n            context.board().move(this.parameters[0].eval(context));\n        } catch (err) {\n            err.on = this.token;\n            throw err;\n        }\n        return context;\n    };\n\n    node.RemoveStone = function (token, parameters) {\n        this.token = token;\n        this.arity = constants.STM;\n        this.alias = 'Grab';\n        this.parameters = parameters;\n    };\n\n    node.RemoveStone.prototype.interpret = function (context) {\n        try {\n            context.board().removeStone(this.parameters[0].eval(context));\n        } catch (err) {\n            err.on = this.token;\n            throw err;\n        }\n        return context;\n    };\n\n    node.PutStone = function (token, parameters) {\n        this.token = token;\n        this.arity = constants.STM;\n        this.alias = 'Drop';\n        this.parameters = parameters;\n    };\n\n    node.PutStone.prototype.interpret = function (context) {\n        context.board().putStone(this.parameters[0].eval(context));\n        return context;\n    };\n\n    node.MoveToEdge = function (token, parameters) {\n        this.token = token;\n        this.arity = constants.STM;\n        this.alias = 'MoveToEdge';\n        this.parameters = parameters;\n    };\n\n    node.MoveToEdge.prototype.interpret = function (context) {\n        context.board().moveToEdge(this.parameters[0].eval(context));\n        return context;\n    };\n\n    node.CleanBoard = function (token, parameters) {\n        this.token = token;\n        this.arity = constants.STM;\n        this.alias = 'CleanBoard';\n        this.parameters = parameters;\n    };\n\n    node.CleanBoard.prototype.interpret = function (context) {\n        context.board().clear();\n        return context;\n    };\n\n    node.Boom = function (token) {\n        this.token = token;\n        this.arity = constants.STM;\n        this.alias = 'BOOM';\n    };\n\n    node.Boom.prototype.interpret = function (context) {\n        try {\n            context.board().boom();\n        } catch (err) {\n            err.on = node;\n            throw err;\n        }\n        return context;\n    };\n}\n;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/nodes/primitive-procedures.js\n// module id = 17\n// module chunks = 0","module.exports = function (node) {\n    function evalArguments(context, parameters) {\n        var results = [];\n        if (parameters) {\n            for (var i = 0; i < parameters.length; i++) {\n                results.push(parameters[i].eval(context));\n            }\n        }\n        return results;\n    }\n\n    function fillParameters(context, parameters, declaration) {\n        // TODO: no se pueden reasignar valores a los parámetros\n        if (declaration.parameters) {\n            for (var i = 0; i < declaration.parameters.length; i++) {\n                context.put(declaration.parameters[i].value, parameters[i]);\n            }\n        }\n    }\n\n    // TODO: el mundo de las variables, índices y parámetros debe ser disjunto por body!!\n\n    node.ProcedureCall = function (token, declarationProvider, parameters) {\n        this.token = token;\n        this.arity = 'routine';\n        this.alias = 'ProcedureCall';\n        this.name = token.value;\n        this.parameters = parameters;\n        this.declarationProvider = declarationProvider;\n    };\n\n    node.ProcedureCall.prototype.interpret = function (context) {\n        var target = this.declarationProvider();\n        if (!target.declaration) {\n            throw new node.errors.InterpreterException('El procedimiento ' + this.name + ' no se encuentra definido.', this.node);\n        }\n        var declaration = target.declaration;\n        var parameterValues = evalArguments(context, this.parameters);\n        context.startContext();\n        fillParameters(context, parameterValues, declaration);\n        node.interpretBlock(declaration.body, context);\n        context.stopContext();\n        return context;\n    };\n\n    node.FunctionCall = function (token, declarationProvider, parameters) {\n        this.token = token;\n        this.arity = 'routine';\n        this.alias = 'FunctionCall';\n        this.name = token.value;\n        this.parameters = parameters;\n        this.declarationProvider = declarationProvider;\n    };\n\n    node.FunctionCall.prototype.eval = function (context) {\n        var target = this.declarationProvider();\n        if (!target.declaration) {\n            throw new node.errors.InterpreterException('La función \"' + this.name + '\" no se encuentra definida.', this.node);\n        }\n        var declaration = target.declaration;\n        var parameterValues = evalArguments(context, this.parameters);\n        context.startContext();\n        context.pushBoard();\n        fillParameters(context, parameterValues, declaration);\n        node.interpretBlock(target.body, context);\n        var result = declaration.return.expression.eval(context);\n        context.popBoard();\n        context.stopContext();\n        return result;\n    };\n}\n;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/nodes/routine-calls.js\n// module id = 18\n// module chunks = 0","module.exports = function (node) {\n    node.ProcedureDeclaration = function (token, parameters, body) {\n        this.token = token;\n        this.name = token.value;\n        this.arity = 'routine';\n        this.alias = 'procedureDeclaration';\n        this.parameters = parameters || [];\n        this.body = body || [];\n    };\n\n    node.FunctionDeclaration = function (token, parameters, body, returnExpression) {\n        this.token = token;\n        this.name = token.value;\n        this.arity = 'routine';\n        this.alias = 'functionDeclaration';\n        this.parameters = parameters || [];\n        this.body = body || [];\n        this.return = returnExpression;\n    };\n\n    node.ReturnStatement = function (token, expression) {\n        this.token = token;\n        this.alias = 'return';\n        this.expression = expression;\n    };\n}\n;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/nodes/routine-declarations.js\n// module id = 19\n// module chunks = 0","module.exports = function (node) {\n    node.While = function (token, expression, body) {\n        this.alias = 'while';\n        this.token = token;\n        this.expression = expression;\n        this.body = body;\n    };\n\n    node.While.prototype.interpret = function (context) {\n        while (this.expression.eval(context)) {\n            node.interpretBlock(this.body, context);\n        }\n        return context;\n    };\n\n    node.Repeat = function (token, expression, body) {\n        this.alias = 'repeat';\n        this.token = token;\n        this.expression = expression;\n        this.body = body;\n    };\n\n    node.Repeat.prototype.interpret = function (context) {\n        var value = this.expression.eval(context);\n        for (var i = 0; i < value; i++) {\n            node.interpretBlock(this.body, context);\n        }\n        return context;\n    };\n\n    node.ForEach = function (token, iterator, items, body) {\n        this.alias = 'foreach';\n        this.token = token;\n        this.iterator = iterator;\n        this.items = items;\n        this.body = body;\n    };\n\n    node.ForEach.prototype.interpret = function (context) {\n        for (var i = 0; i < this.items.length; i++) {\n            context.put(this.iterator.token.value, this.items[i].eval(context));\n            node.interpretBlock(this.body, context);\n        }\n\n        return context;\n    };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/nodes/repetition-statements.js\n// module id = 20\n// module chunks = 0","module.exports = function (node) {\n    node.Program = function (token, body) {\n        this.token = token;\n        this.alias = 'program';\n        this.body = body || [];\n    };\n\n    node.Program.prototype.interpret = function (context) {\n        node.interpretBlock(this.body, context);\n        return context;\n    };\n\n    node.Root = function (program, declarations) {\n        this.alias = 'root';\n        this.program = program;\n        this.declarations = declarations;\n    };\n\n    node.Root.prototype.interpret = function (context) {\n        this.program.interpret(context);\n        return context;\n    };\n}\n;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/nodes/program-root.js\n// module id = 21\n// module chunks = 0","var Board = require('./model');\n\nvar Context = function () {\n    var variablesStack = [];\n    var boardsStack = [];\n    var currentBoard = new Board(9, 9);\n    var currentVariables = {};\n\n    this.init = function () {\n        currentBoard.init();\n    };\n\n    this.nativeRepresentations = function () {\n        return Board;\n    };\n\n    this.board = function () {\n        return currentBoard;\n    };\n\n    this.put = function (key, value) {\n        currentVariables[key] = value;\n    };\n\n    this.get = function (id) {\n        return currentVariables[id];\n    };\n\n    this.all = function () {\n        return currentVariables;\n    };\n\n    this.startContext = function () {\n        variablesStack.push(currentVariables);\n        currentVariables = {};\n    };\n\n    this.stopContext = function () {\n        currentVariables = variablesStack.pop();\n    };\n\n    this.pushBoard = function () {\n        boardsStack.push(currentBoard);\n        currentBoard = currentBoard.clone();\n    };\n\n    this.popBoard = function () {\n        currentBoard = boardsStack.pop();\n    };\n\n    this.init();\n};\n\nmodule.exports = Context;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/model/execution-context.js\n// module id = 22\n// module chunks = 0","var GobstonesError = function (message) {\n    this.message = message;\n};\nGobstonesError.prototype = new Error('BOOM');\n\nfunction Board(sizeX, sizeY) {\n    this.x = 0;\n    this.y = 0;\n\n    this.sizeX = sizeX;\n    this.sizeY = sizeY;\n}\n\nBoard.blue = 0;\nBoard.red = 1;\nBoard.black = 2;\nBoard.green = 3;\n\nBoard.north = [0, 1];\nBoard.east = [1, 0];\nBoard.south = [0, -1];\nBoard.west = [-1, 0];\n\nBoard.minDir = Board.north;\nBoard.maxDir = Board.west;\nBoard.minColor = Board.blue;\nBoard.maxColor = Board.green;\n\nBoard.prototype.init = function () {\n    this.table = [[], [], [], []];\n    for (var i = 0; i < this.sizeX; i++) {\n        this.table[0][i] = [];\n        this.table[1][i] = [];\n        this.table[2][i] = [];\n        this.table[3][i] = [];\n        for (var j = 0; j < this.sizeY; j++) {\n            this.table[0][i][j] = 0;\n            this.table[1][i][j] = 0;\n            this.table[2][i][j] = 0;\n            this.table[3][i][j] = 0;\n        }\n    }\n};\n\nBoard.prototype.clone = function () {\n    var c = new Board(this.sizeX, this.sizeY);\n    c.init();\n    for (var i = 0; i < this.sizeX; i++) {\n        c.table[0][i] = [];\n        c.table[1][i] = [];\n        c.table[2][i] = [];\n        c.table[3][i] = [];\n        for (var j = 0; j < this.sizeY; j++) {\n            c.table[0][i][j] = this.table[0][i][j];\n            c.table[1][i][j] = this.table[1][i][j];\n            c.table[2][i][j] = this.table[2][i][j];\n            c.table[3][i][j] = this.table[3][i][j];\n        }\n    }\n    c.x = this.x;\n    c.y = this.y;\n    return c;\n};\n\nBoard.prototype.putStone = function (color) {\n    this.dropStones(color, 1);\n};\n\nBoard.prototype.dropStones = function (color, amount) {\n    this.table[color][this.x][this.y] += amount;\n};\n\nBoard.prototype.removeStone = function (color) {\n    if (this.table[color][this.x][this.y] <= 0) {\n        throw new GobstonesError('Se intentó sacar una bolita pero ya no quedaban bolitas para sacar');\n    }\n    this.table[color][this.x][this.y] -= 1;\n};\n\nBoard.prototype.boom = function () {\n    throw new GobstonesError('BOOM!');\n};\n\nBoard.prototype.clear = function () {\n    this.init();\n};\n\nBoard.prototype.amountStones = function (color) {\n    return this.table[color][this.x][this.y];\n};\n\nBoard.prototype.canMove = function (vec) {\n    var nextX = this.x + vec[0];\n    var nextY = this.y + vec[1];\n    return nextX < this.sizeX && nextX >= 0 && nextY < this.sizeY && nextY >= 0;\n};\n\nBoard.prototype.move = function (vec) {\n    if (!this.canMove(vec)) {\n        throw new GobstonesError('Te caiste del tablero por: x=' + this.x + ' y=' + this.y);\n    }\n    this.x += vec[0];\n    this.y += vec[1];\n};\n\nBoard.prototype.moveToEdge = function (vec) {\n    if (vec[0] === 1) {\n        this.x = this.sizeX - 1;\n    } else if (vec[0] === -1) {\n        this.x = 0;\n    } else if (vec[1] === 1) {\n        this.y = this.sizeY - 1;\n    } else if (vec[1] === -1) {\n        this.y = 0;\n    }\n};\n\nBoard.prototype.printAscii = function () {\n    var out = this.sizeX + 'x' + this.sizeY + '\\n';\n    var az = this.table[0];\n    var ro = this.table[1];\n    var ne = this.table[2];\n    var ve = this.table[3];\n    for (var j = this.sizeY - 1; j >= 0; j--) {\n        for (var i = 0; i < this.sizeX; i++) {\n            out += (az[i][j] || ro[i][j] || ne[i][j] || ve[i][j]) ? '#' : '.';\n        }\n        out += '\\n';\n    }\n    return out;\n};\n\nmodule.exports = Board;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/model/model.js\n// module id = 23\n// module chunks = 0"],"sourceRoot":""}